start 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (276ms)
    √ employee use tm to get a table value type representing table and create that user table type (85ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (724ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded (42ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (219ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (266ms)
    √ bulk insert/update/select int column of signed batchSize 10 (213ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10 (49ms)
    √ bulk insert/select null column of datetime batchSize 1 (50ms)
    √ employee complex json object array bulk operations (291ms)
    √ employee insert/select with non primary key (131ms)
    √ employee insert - update a single column (87ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1 (61ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (81ms)
    √ bulk insert/select bit column batchSize 1 (188ms)
    √ bulk insert/select bit column 10 (51ms)
    √ bulk insert/update/select bit column 10 (87ms)
    √ bulk insert/select decimal column batchSize 1 (61ms)
    √ bulk insert/select decimal column batchSize 10 (60ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (86ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2008ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (333ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (58ms)
    √ test timezone components of datetimeoffset


  219 passing (30s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (77ms)
    √ employee use tm to get a table value type representing table and create that user table type (252ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (704ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (50ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (197ms)
    √ bulk insert/update/select int column of signed batchSize 10 (193ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (237ms)
    √ employee insert/select with non primary key (95ms)
    √ employee insert - update a single column (98ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (184ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (181ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2014ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (344ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (38s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (305ms)
    √ employee use tm to get a table value type representing table and create that user table type (77ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all (47ms)
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (40ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3000ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (707ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field (101ms)
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (57ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (184ms)
    √ bulk insert/update/select int column of signed batchSize 10 (187ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (185ms)
    √ employee complex json object array bulk operations (230ms)
    √ employee insert/select with non primary key (129ms)
    √ employee insert - update a single column (100ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10 (214ms)
    √ bulk insert/update/select bit column 10 (44ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (187ms)
    √ bulk insert/select varchar column batchSize 1 (185ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (186ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (329ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (30s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (112ms)
    √ employee use tm to get a table value type representing table and create that user table type (278ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (717ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (76ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (209ms)
    √ bulk insert/update/select int column of signed batchSize 10 (211ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (245ms)
    √ employee insert/select with non primary key (92ms)
    √ employee insert - update a single column (101ms)
    √ bulk insert/update/select bit strict column 10 (109ms)
    √ bulk insert/select bit strict column batchSize 1 (92ms)
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1 (117ms)
    √ bulk insert/select datetime column batchSize 10 (86ms)
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback (44ms)
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (344ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (36s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (79ms)
    √ employee use tm to get a table value type representing table and create that user table type (88ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (715ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text (52ms)
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (54ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (249ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (240ms)
    √ bulk insert/update/select int column of signed batchSize 10 (293ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (281ms)
    √ employee insert/select with non primary key (262ms)
    √ employee insert - update a single column (87ms)
    √ bulk insert/update/select bit strict column 10 (222ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (121ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (183ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2014ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (355ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (30s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (252ms)
    √ employee use tm to get a table value type representing table and create that user table type (85ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (45ms)
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (65ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled (63ms)
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (814ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text (143ms)
    √ test 030 - verify functionality of data type 'nchar', fetch as text (150ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text (127ms)
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (205ms)
    √ bulk insert/update/select int column of signed batchSize 10 (203ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (246ms)
    √ employee insert/select with non primary key (88ms)
    √ employee insert - update a single column (98ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10 (45ms)
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (355ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (40s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (264ms)
    √ employee use tm to get a table value type representing table and create that user table type (82ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (700ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (53ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (213ms)
    √ bulk insert/update/select int column of signed batchSize 10 (201ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (242ms)
    √ employee insert/select with non primary key (91ms)
    √ employee insert - update a single column (87ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10 (185ms)
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (45ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (230ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (336ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (40s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (79ms)
    √ employee use tm to get a table value type representing table and create that user table type (254ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (709ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number (103ms)
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number (42ms)
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter (49ms)
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (209ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (195ms)
    √ bulk insert/update/select int column of signed batchSize 10 (207ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (242ms)
    √ employee insert/select with non primary key (92ms)
    √ employee insert - update a single column (92ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (39ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (190ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (40ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (181ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (348ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (262ms)
    √ employee use tm to get a table value type representing table and create that user table type (98ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (708ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (43ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text (42ms)
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text (162ms)
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2000ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (305ms)
    √ bulk insert/update/select int column of signed batchSize 10 (218ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (253ms)
    √ employee insert/select with non primary key (85ms)
    √ employee insert - update a single column (90ms)
    √ bulk insert/update/select bit strict column 10 (184ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10 (183ms)
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (181ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (331ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (35s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (82ms)
    √ employee use tm to get a table value type representing table and create that user table type (78ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (726ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (197ms)
    √ bulk insert/update/select int column of signed batchSize 10 (184ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (243ms)
    √ employee insert/select with non primary key (84ms)
    √ employee insert - update a single column (84ms)
    √ bulk insert/update/select bit strict column 10 (189ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (181ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (348ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (28s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (280ms)
    √ employee use tm to get a table value type representing table and create that user table type (84ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all (86ms)
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (718ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field (108ms)
    √ insert min and max number values
    √ insert large string into max column (65ms)
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2000ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (62ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (204ms)
    √ bulk insert/update/select int column of signed batchSize 10 (199ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (172ms)
    √ employee complex json object array bulk operations (253ms)
    √ employee insert/select with non primary key (259ms)
    √ employee insert - update a single column (80ms)
    √ bulk insert/update/select bit strict column 10 (183ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (186ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (325ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (37s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (247ms)
    √ employee use tm to get a table value type representing table and create that user table type (94ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (717ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter (221ms)
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (227ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (196ms)
    √ bulk insert/update/select int column of signed batchSize 10 (188ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (271ms)
    √ employee insert/select with non primary key (88ms)
    √ employee insert - update a single column (273ms)
    √ bulk insert/update/select bit strict column 10 (194ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (190ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (336ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (30s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (91ms)
    √ employee use tm to get a table value type representing table and create that user table type (84ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (718ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date (139ms)
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (131ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date (155ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (204ms)
    √ bulk insert/update/select int column of signed batchSize 10 (192ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (287ms)
    √ employee insert/select with non primary key (91ms)
    √ employee insert - update a single column (89ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (179ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10 (65ms)
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (188ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (211ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (88ms)
    √ bulk insert simple multi-column object in batches 10 (186ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (352ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (40s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (81ms)
    √ employee use tm to get a table value type representing table and create that user table type (77ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (835ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter (59ms)
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time (95ms)
    √ verify bug fix for last day of the year error (54ms)
    √ verify Buffer objects as input parameters (48ms)
    √ verify that non-Buffer object parameter returns an error (98ms)
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (55ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (195ms)
    √ bulk insert/update/select int column of signed batchSize 10 (184ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10 (177ms)
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (246ms)
    √ employee insert/select with non primary key (89ms)
    √ employee insert - update a single column (77ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10 (183ms)
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (397ms)
    √ bulk insert/select/delete varchar column batchSize 10 (245ms)
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (41ms)
    √ bulk insert simple multi-column object in batches 10 (190ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2018ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (336ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (42s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (255ms)
    √ employee use tm to get a table value type representing table and create that user table type (83ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (708ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (50ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (204ms)
    √ bulk insert/update/select int column of signed batchSize 10 (196ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (236ms)
    √ employee insert/select with non primary key (85ms)
    √ employee insert - update a single column (92ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (203ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (184ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2019ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (336ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (40ms)
    √ test timezone components of datetimeoffset


  219 passing (28s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (53ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (85ms)
    √ employee use tm to get a table value type representing table and create that user table type (95ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (59ms)
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (70ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (746ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (53ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (123ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (123ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text (55ms)
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text (53ms)
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (53ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (213ms)
    √ bulk insert/update/select int column of signed batchSize 10 (213ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (241ms)
    √ employee insert/select with non primary key (93ms)
    √ employee insert - update a single column (274ms)
    √ bulk insert/update/select bit strict column 10 (195ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (86ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (194ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (351ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (41s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (43ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (269ms)
    √ employee use tm to get a table value type representing table and create that user table type (83ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (717ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar (39ms)
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (198ms)
    √ bulk insert/update/select int column of signed batchSize 10 (187ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (241ms)
    √ employee insert/select with non primary key (99ms)
    √ employee insert - update a single column (86ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (339ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (28s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (251ms)
    √ employee use tm to get a table value type representing table and create that user table type (91ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (681ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (40ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (56ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values (139ms)
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time (70ms)
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error (91ms)
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (188ms)
    √ bulk insert/update/select int column of signed batchSize 10 (289ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (228ms)
    √ employee insert/select with non primary key (88ms)
    √ employee insert - update a single column (84ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (202ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (171ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (328ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (43s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (78ms)
    √ employee use tm to get a table value type representing table and create that user table type (113ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....; (163ms)
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3000ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (699ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (239ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (190ms)
    √ bulk insert/update/select int column of signed batchSize 10 (400ms)
    √ bulk insert/select varbinary column batchSize 1 (291ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (239ms)
    √ employee insert/select with non primary key (116ms)
    √ employee insert - update a single column (126ms)
    √ bulk insert/update/select bit strict column 10 (38ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (84ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (109ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (342ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (52ms)
    √ test timezone components of datetimeoffset


  219 passing (39s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (52ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (73ms)
    √ employee use tm to get a table value type representing table and create that user table type (80ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (104ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (689ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (207ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (187ms)
    √ bulk insert/update/select int column of signed batchSize 10 (201ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (232ms)
    √ employee insert/select with non primary key (81ms)
    √ employee insert - update a single column (80ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (174ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (41ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (47ms)
    √ bulk insert simple multi-column object in batches 10 (176ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (325ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (51ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (242ms)
    √ employee use tm to get a table value type representing table and create that user table type (76ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (684ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (48ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (199ms)
    √ bulk insert/update/select int column of signed batchSize 10 (191ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (232ms)
    √ employee insert/select with non primary key (86ms)
    √ employee insert - update a single column (88ms)
    √ bulk insert/update/select bit strict column 10 (187ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (184ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (335ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (35s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (43ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (251ms)
    √ employee use tm to get a table value type representing table and create that user table type (85ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (734ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (48ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (188ms)
    √ bulk insert/update/select int column of signed batchSize 10 (178ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (244ms)
    √ employee insert/select with non primary key (101ms)
    √ employee insert - update a single column (255ms)
    √ bulk insert/update/select bit strict column 10 (182ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (178ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (337ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (89ms)
    √ employee use tm to get a table value type representing table and create that user table type (244ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (676ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number (222ms)
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (178ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (205ms)
    √ bulk insert/update/select int column of signed batchSize 10 (178ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (248ms)
    √ employee insert/select with non primary key (91ms)
    √ employee insert - update a single column (94ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (183ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (190ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2013ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (331ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (40s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (260ms)
    √ employee use tm to get a table value type representing table and create that user table type (85ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (692ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (50ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (190ms)
    √ bulk insert/update/select int column of signed batchSize 10 (177ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (258ms)
    √ employee insert/select with non primary key (84ms)
    √ employee insert - update a single column (132ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row. (125ms)
    √ stress test prepared statement with 500 invocations cycling through primary key (332ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (40s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (89ms)
    √ employee use tm to get a table value type representing table and create that user table type (80ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (687ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (68ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (220ms)
    √ bulk insert/update/select int column of signed batchSize 10 (204ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (265ms)
    √ employee insert/select with non primary key (87ms)
    √ employee insert - update a single column (84ms)
    √ bulk insert/update/select bit strict column 10 (185ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (181ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (180ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (326ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (28s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (77ms)
    √ employee use tm to get a table value type representing table and create that user table type (75ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (700ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (231ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (252ms)
    √ bulk insert/update/select int column of signed batchSize 10 (182ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (279ms)
    √ employee insert/select with non primary key (242ms)
    √ employee insert - update a single column (92ms)
    √ bulk insert/update/select bit strict column 10 (180ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (44ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (39ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (38ms)
    √ bulk insert simple multi-column object in batches 10 (176ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (339ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (36s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (66ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (303ms)
    √ employee use tm to get a table value type representing table and create that user table type (91ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (109ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (700ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (50ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (199ms)
    √ bulk insert/update/select int column of signed batchSize 10 (258ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (238ms)
    √ employee insert/select with non primary key (85ms)
    √ employee insert - update a single column (266ms)
    √ bulk insert/update/select bit strict column 10 (180ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (52ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (179ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (317ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (56ms)
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (48ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (265ms)
    √ employee use tm to get a table value type representing table and create that user table type (91ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (100ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (725ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number (39ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2000ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (49ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (183ms)
    √ bulk insert/update/select int column of signed batchSize 10 (200ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (234ms)
    √ employee insert/select with non primary key (86ms)
    √ employee insert - update a single column (84ms)
    √ bulk insert/update/select bit strict column 10 (174ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (178ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (66ms)
    √ bulk insert/select decimal column batchSize 1 (44ms)
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (208ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (38ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (179ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (332ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (34s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test (52ms)
    √ use tvp to select from table type complex object Employee type (79ms)
    √ employee use tm to get a table value type representing table and create that user table type (83ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (691ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text (46ms)
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (72ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (217ms)
    √ bulk insert/update/select int column of signed batchSize 10 (181ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (235ms)
    √ employee insert/select with non primary key (88ms)
    √ employee insert - update a single column (77ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (178ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (40ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (38ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (226ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (321ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (257ms)
    √ employee use tm to get a table value type representing table and create that user table type (77ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (694ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (136ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text (286ms)
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (177ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text (66ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number (57ms)
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (49ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (190ms)
    √ bulk insert/update/select int column of signed batchSize 10 (192ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (229ms)
    √ employee insert/select with non primary key (92ms)
    √ employee insert - update a single column (110ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (95ms)
    √ bulk insert/select int column of signed batchSize 10 (48ms)
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10 (39ms)
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (52ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (178ms)
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (57ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (193ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent (42ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2014ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (335ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (43s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test (43ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (84ms)
    √ employee use tm to get a table value type representing table and create that user table type (90ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (692ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text (89ms)
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (49ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (192ms)
    √ bulk insert/update/select int column of signed batchSize 10 (179ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (235ms)
    √ employee insert/select with non primary key (84ms)
    √ employee insert - update a single column (95ms)
    √ bulk insert/update/select bit strict column 10 (41ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10 (45ms)
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (180ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10 (181ms)
    √ bulk insert/update/select varchar column batchSize 10 (153ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (439ms)
    √ bulk insert simple multi-column object in batches 10 (259ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (329ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (40s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (41ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (75ms)
    √ employee use tm to get a table value type representing table and create that user table type (240ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (100ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (699ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number (55ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (49ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (186ms)
    √ bulk insert/update/select int column of signed batchSize 10 (177ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (229ms)
    √ employee insert/select with non primary key (84ms)
    √ employee insert - update a single column (80ms)
    √ bulk insert/update/select bit strict column 10 (41ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (186ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (174ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent (38ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2014ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (361ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (39ms)
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (261ms)
    √ employee use tm to get a table value type representing table and create that user table type (248ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (715ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date (45ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (40ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text (40ms)
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (257ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (192ms)
    √ bulk insert/update/select int column of signed batchSize 10 (193ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (243ms)
    √ employee insert/select with non primary key (75ms)
    √ employee insert - update a single column (97ms)
    √ bulk insert/update/select bit strict column 10 (176ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10 (54ms)
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1 (44ms)
    √ bulk insert/select bit column 10 (65ms)
    √ bulk insert/update/select bit column 10 (126ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10 (230ms)
    √ bulk insert/update/select decimal column batchSize 10 (194ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (57ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (174ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2014ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (321ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (39s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (77ms)
    √ employee use tm to get a table value type representing table and create that user table type (82ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (707ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (49ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (182ms)
    √ bulk insert/update/select int column of signed batchSize 10 (192ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (235ms)
    √ employee insert/select with non primary key (95ms)
    √ employee insert - update a single column (82ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (73ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (216ms)
    √ bulk insert simple multi-column object in batches 10 (181ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (325ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (28s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (43ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (86ms)
    √ employee use tm to get a table value type representing table and create that user table type (82ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (676ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date (122ms)
    √ test 002 - verify functionality of data type 'datetime', fetch as date (152ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary (46ms)
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (50ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (184ms)
    √ bulk insert/update/select int column of signed batchSize 10 (176ms)
    √ bulk insert/select varbinary column batchSize 1 (38ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (261ms)
    √ employee insert/select with non primary key (79ms)
    √ employee insert - update a single column (77ms)
    √ bulk insert/update/select bit strict column 10 (39ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2019ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (343ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (39s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (389ms)
    √ employee use tm to get a table value type representing table and create that user table type (97ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (695ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (53ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (208ms)
    √ bulk insert/update/select int column of signed batchSize 10 (305ms)
    √ bulk insert/select varbinary column batchSize 1 (87ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (247ms)
    √ employee insert/select with non primary key (95ms)
    √ employee insert - update a single column (82ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1 (182ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (111ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (48ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (178ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (334ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (38ms)
    √ test timezone components of datetimeoffset


  219 passing (41s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (42ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (74ms)
    √ employee use tm to get a table value type representing table and create that user table type (84ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (709ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (209ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (211ms)
    √ bulk insert/update/select int column of signed batchSize 10 (197ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (240ms)
    √ employee insert/select with non primary key (94ms)
    √ employee insert - update a single column (254ms)
    √ bulk insert/update/select bit strict column 10 (191ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (179ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (332ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (72ms)
    √ test timezone components of datetimeoffset


  219 passing (30s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (70ms)
    √ non dbo schema use tvp simple test type select test (51ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test (57ms)
    √ use tvp to select from table type complex object Employee type (152ms)
    √ employee use tm to get a table value type representing table and create that user table type (85ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....; (80ms)

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (750ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar (69ms)
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (194ms)
    √ bulk insert/update/select int column of signed batchSize 10 (207ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10 (184ms)
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (240ms)
    √ employee insert/select with non primary key (267ms)
    √ employee insert - update a single column (107ms)
    √ bulk insert/update/select bit strict column 10 (188ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (39ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (195ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (40ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (191ms)
    √ bulk insert simple multi-column object in batches 10 (187ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback (58ms)
    √ call proc that has 2 output string params + return code (68ms)
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (335ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset (39ms)


  219 passing (38s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (248ms)
    √ employee use tm to get a table value type representing table and create that user table type (91ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (713ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (221ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (185ms)
    √ bulk insert/update/select int column of signed batchSize 10 (211ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (241ms)
    √ employee insert/select with non primary key (85ms)
    √ employee insert - update a single column (85ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (40ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2005ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (332ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (99ms)
    √ employee use tm to get a table value type representing table and create that user table type (92ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (709ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date (189ms)
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date (159ms)
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (174ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text (131ms)
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (376ms)
    √ bulk insert/update/select int column of signed batchSize 10 (194ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (241ms)
    √ employee insert/select with non primary key (96ms)
    √ employee insert - update a single column (280ms)
    √ bulk insert/update/select bit strict column 10 (193ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (185ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (42ms)
    √ bulk insert simple multi-column object in batches 10 (184ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (337ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (54ms)
    √ test timezone components of datetimeoffset


  219 passing (41s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (52ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (81ms)
    √ employee use tm to get a table value type representing table and create that user table type (98ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (759ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (61ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (206ms)
    √ bulk insert/update/select int column of signed batchSize 10 (208ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (47ms)
    √ employee complex json object array bulk operations (244ms)
    √ employee insert/select with non primary key (88ms)
    √ employee insert - update a single column (84ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (327ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (39s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test (77ms)
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (268ms)
    √ employee use tm to get a table value type representing table and create that user table type (247ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (713ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date (50ms)
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (66ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (254ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (240ms)
    √ bulk insert/update/select int column of signed batchSize 10 (249ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (43ms)
    √ employee complex json object array bulk operations (259ms)
    √ employee insert/select with non primary key (81ms)
    √ employee insert - update a single column (84ms)
    √ bulk insert/update/select bit strict column 10 (189ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (73ms)
    √ bulk insert/select varchar column batchSize 1 (119ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (184ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (358ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (30s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (256ms)
    √ employee use tm to get a table value type representing table and create that user table type (80ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (723ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (50ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (206ms)
    √ bulk insert/update/select int column of signed batchSize 10 (196ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (240ms)
    √ employee insert/select with non primary key (85ms)
    √ employee insert - update a single column (135ms)
    √ bulk insert/update/select bit strict column 10 (38ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (200ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (180ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (329ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (34s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (52ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (86ms)
    √ employee use tm to get a table value type representing table and create that user table type (280ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (736ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (225ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (267ms)
    √ bulk insert/update/select int column of signed batchSize 10 (201ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (274ms)
    √ employee insert/select with non primary key (99ms)
    √ employee insert - update a single column (98ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (38ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (349ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification (40ms)
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (28s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test (54ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (290ms)
    √ employee use tm to get a table value type representing table and create that user table type (108ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (797ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (67ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text (40ms)
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error (72ms)
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (197ms)
    √ bulk insert/update/select int column of signed batchSize 10 (188ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (431ms)
    √ employee insert/select with non primary key (94ms)
    √ employee insert - update a single column (260ms)
    √ bulk insert/update/select bit strict column 10 (184ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (50ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (200ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (184ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (331ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (42s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (51ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (81ms)
    √ employee use tm to get a table value type representing table and create that user table type (84ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (738ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (234ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (216ms)
    √ bulk insert/update/select int column of signed batchSize 10 (185ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (249ms)
    √ employee insert/select with non primary key (99ms)
    √ employee insert - update a single column (95ms)
    √ bulk insert/update/select bit strict column 10 (200ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (184ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent (55ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (335ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (90ms)
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (220ms)
    √ non dbo schema use tvp simple test type select test (58ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (78ms)
    √ employee use tm to get a table value type representing table and create that user table type (79ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (733ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text (42ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (70ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (44ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (46ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (67ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (49ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (205ms)
    √ bulk insert/update/select int column of signed batchSize 10 (189ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (246ms)
    √ employee insert/select with non primary key (253ms)
    √ employee insert - update a single column (273ms)
    √ bulk insert/update/select bit strict column 10 (197ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (57ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (46ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (39ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (39ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (40ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (185ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (339ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (36s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (301ms)
    √ employee use tm to get a table value type representing table and create that user table type (79ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests (38ms)
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (718ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (212ms)
    √ bulk insert/update/select int column of signed batchSize 10 (184ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (245ms)
    √ employee insert/select with non primary key (94ms)
    √ employee insert - update a single column (278ms)
    √ bulk insert/update/select bit strict column 10 (203ms)
    √ bulk insert/select bit strict column batchSize 1 (149ms)
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (198ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (186ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2014ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (339ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (36s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (58ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (95ms)
    √ employee use tm to get a table value type representing table and create that user table type (83ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (737ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number (38ms)
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (79ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number (51ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number (48ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter (76ms)
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (61ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (204ms)
    √ bulk insert/update/select int column of signed batchSize 10 (186ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (241ms)
    √ employee insert/select with non primary key (86ms)
    √ employee insert - update a single column (285ms)
    √ bulk insert/update/select bit strict column 10 (195ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (179ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (330ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (301ms)
    √ employee use tm to get a table value type representing table and create that user table type (249ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests (47ms)
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (709ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (83ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (185ms)
    √ bulk insert/update/select int column of signed batchSize 10 (196ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (47ms)
    √ employee complex json object array bulk operations (74ms)
    √ employee insert/select with non primary key (93ms)
    √ employee insert - update a single column (94ms)
    √ bulk insert/update/select bit strict column 10 (49ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (199ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (39ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (180ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2005ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (333ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (39s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (250ms)
    √ employee use tm to get a table value type representing table and create that user table type (152ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (718ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (105ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (197ms)
    √ bulk insert/update/select int column of signed batchSize 10 (200ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (238ms)
    √ employee insert/select with non primary key (91ms)
    √ employee insert - update a single column (84ms)
    √ bulk insert/update/select bit strict column 10 (38ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10 (182ms)
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10 (323ms)
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (189ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (186ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (338ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (81ms)
    √ employee use tm to get a table value type representing table and create that user table type (87ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (738ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date (40ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (47ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (66ms)
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (51ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary (92ms)
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors (83ms)
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded (56ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (180ms)
    √ bulk insert/update/select int column of signed batchSize 10 (182ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (185ms)
    √ employee complex json object array bulk operations (221ms)
    √ employee insert/select with non primary key (111ms)
    √ employee insert - update a single column (95ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (189ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (189ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2019ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (350ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (38s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (69ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (270ms)
    √ employee use tm to get a table value type representing table and create that user table type (91ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (731ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (229ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (199ms)
    √ bulk insert/update/select int column of signed batchSize 10 (182ms)
    √ bulk insert/select varbinary column batchSize 1 (155ms)
    √ bulk insert/select varbinary column batchSize 10 (46ms)
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (228ms)
    √ employee insert/select with non primary key (100ms)
    √ employee insert - update a single column (94ms)
    √ bulk insert/update/select bit strict column 10 (303ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10 (103ms)
    √ bulk insert/select/delete decimal column batchSize 10 (225ms)
    √ bulk insert/update/select decimal column batchSize 10 (727ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (183ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2014ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (327ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (41s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (259ms)
    √ employee use tm to get a table value type representing table and create that user table type (81ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (700ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (205ms)
    √ bulk insert/update/select int column of signed batchSize 10 (212ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (247ms)
    √ employee insert/select with non primary key (106ms)
    √ employee insert - update a single column (82ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2013ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (343ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (94ms)
    √ employee use tm to get a table value type representing table and create that user table type (85ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....; (80ms)
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (100ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (683ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2000ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (203ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (201ms)
    √ bulk insert/update/select int column of signed batchSize 10 (198ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (242ms)
    √ employee insert/select with non primary key (81ms)
    √ employee insert - update a single column (87ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10 (173ms)
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (46ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (175ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (326ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (35s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (43ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (229ms)
    √ employee use tm to get a table value type representing table and create that user table type (98ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (686ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (52ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (72ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (213ms)
    √ bulk insert/update/select int column of signed batchSize 10 (199ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (239ms)
    √ employee insert/select with non primary key (84ms)
    √ employee insert - update a single column (100ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (38ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (205ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (42ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (179ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results (38ms)
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (324ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (30s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (243ms)
    √ employee use tm to get a table value type representing table and create that user table type (97ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (696ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text (73ms)
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number (121ms)
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (186ms)
    √ bulk insert/update/select int column of signed batchSize 10 (178ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (272ms)
    √ employee insert/select with non primary key (88ms)
    √ employee insert - update a single column (82ms)
    √ bulk insert/update/select bit strict column 10 (181ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (172ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2014ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (336ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (39s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (250ms)
    √ employee use tm to get a table value type representing table and create that user table type (86ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (687ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date (40ms)
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (50ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (199ms)
    √ bulk insert/update/select int column of signed batchSize 10 (203ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (227ms)
    √ employee insert/select with non primary key (85ms)
    √ employee insert - update a single column (281ms)
    √ bulk insert/update/select bit strict column 10 (184ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (180ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (176ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (317ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (41ms)
    √ test timezone components of datetimeoffset


  219 passing (39s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (243ms)
    √ employee use tm to get a table value type representing table and create that user table type (77ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (697ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (94ms)
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (189ms)
    √ bulk insert/update/select int column of signed batchSize 10 (191ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10 (164ms)
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (235ms)
    √ employee insert/select with non primary key (130ms)
    √ employee insert - update a single column (89ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (96ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (173ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2014ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (325ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (252ms)
    √ employee use tm to get a table value type representing table and create that user table type (244ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (696ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (226ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (190ms)
    √ bulk insert/update/select int column of signed batchSize 10 (187ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (236ms)
    √ employee insert/select with non primary key (89ms)
    √ employee insert - update a single column (104ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (176ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2014ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (326ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (36s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (43ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (94ms)
    √ employee use tm to get a table value type representing table and create that user table type (93ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (676ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (55ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (213ms)
    √ bulk insert/update/select int column of signed batchSize 10 (198ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (261ms)
    √ employee insert/select with non primary key (93ms)
    √ employee insert - update a single column (91ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (38ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (38ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (41ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (42ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2011ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (338ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (28s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (77ms)
    √ employee use tm to get a table value type representing table and create that user table type (76ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (702ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (218ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (191ms)
    √ bulk insert/update/select int column of signed batchSize 10 (189ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (230ms)
    √ employee insert/select with non primary key (79ms)
    √ employee insert - update a single column (79ms)
    √ bulk insert/update/select bit strict column 10 (184ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (49ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (63ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (206ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (283ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2023ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (324ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (39s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (49ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (242ms)
    √ employee use tm to get a table value type representing table and create that user table type (103ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (676ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field (72ms)
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (48ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (185ms)
    √ bulk insert/update/select int column of signed batchSize 10 (177ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (233ms)
    √ employee insert/select with non primary key (244ms)
    √ employee insert - update a single column (88ms)
    √ bulk insert/update/select bit strict column 10 (184ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (178ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (63ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (39ms)
    √ bulk insert simple multi-column object in batches 10 (171ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2011ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (328ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (56ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (296ms)
    √ employee use tm to get a table value type representing table and create that user table type (71ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (698ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2000ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (48ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (324ms)
    √ bulk insert/update/select int column of signed batchSize 10 (193ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (235ms)
    √ employee insert/select with non primary key (82ms)
    √ employee insert - update a single column (275ms)
    √ bulk insert/update/select bit strict column 10 (182ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (39ms)
    √ bulk insert simple multi-column object in batches 10 (174ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2186ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (328ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (80ms)
    √ test timezone components of datetimeoffset


  219 passing (40s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (80ms)
    √ employee use tm to get a table value type representing table and create that user table type (86ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (692ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (59ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (48ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (197ms)
    √ bulk insert/update/select int column of signed batchSize 10 (187ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (230ms)
    √ employee insert/select with non primary key (98ms)
    √ employee insert - update a single column (105ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (173ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (55ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (174ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2013ms)
    √ call proc that returns length of input string and decribes itself in results (45ms)
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (320ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (38s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (274ms)
    √ employee use tm to get a table value type representing table and create that user table type (74ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (758ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (75ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary (52ms)
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded (49ms)
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (208ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (219ms)
    √ bulk insert/update/select int column of signed batchSize 10 (184ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (223ms)
    √ employee insert/select with non primary key (84ms)
    √ employee insert - update a single column (83ms)
    √ bulk insert/update/select bit strict column 10 (205ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10 (171ms)
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (190ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (321ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (80ms)
    √ employee use tm to get a table value type representing table and create that user table type (86ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (687ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text (38ms)
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text (79ms)
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly (328ms)
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4000ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (212ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (191ms)
    √ bulk insert/update/select int column of signed batchSize 10 (189ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (229ms)
    √ employee insert/select with non primary key (85ms)
    √ employee insert - update a single column (84ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (43ms)
    √ bulk insert/select varchar column batchSize 1 (188ms)
    √ bulk insert/select varchar column batchSize 10 (181ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (49ms)
    √ bulk insert simple multi-column object in batches 10 (173ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent (41ms)
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2026ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (318ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (35s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (80ms)
    √ employee use tm to get a table value type representing table and create that user table type (77ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (693ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (183ms)
    √ bulk insert/update/select int column of signed batchSize 10 (186ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (225ms)
    √ employee insert/select with non primary key (100ms)
    √ employee insert - update a single column (114ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (190ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (188ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2014ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (318ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (91ms)
    √ test timezone components of datetimeoffset


  219 passing (28s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (246ms)
    √ employee use tm to get a table value type representing table and create that user table type (88ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (678ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (50ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (241ms)
    √ bulk insert/update/select int column of signed batchSize 10 (181ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (233ms)
    √ employee insert/select with non primary key (89ms)
    √ employee insert - update a single column (264ms)
    √ bulk insert/update/select bit strict column 10 (183ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (173ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2018ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (314ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (36s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test (39ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (251ms)
    √ employee use tm to get a table value type representing table and create that user table type (86ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (686ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (187ms)
    √ bulk insert/update/select int column of signed batchSize 10 (174ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (251ms)
    √ employee insert/select with non primary key (86ms)
    √ employee insert - update a single column (76ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (331ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (28s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (86ms)
    √ employee use tm to get a table value type representing table and create that user table type (81ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (725ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date (188ms)
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date (133ms)
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date (121ms)
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2000ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (53ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (208ms)
    √ bulk insert/update/select int column of signed batchSize 10 (197ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1 (43ms)
    √ employee complex json object array bulk operations (245ms)
    √ employee insert/select with non primary key (96ms)
    √ employee insert - update a single column (88ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (182ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2018ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (350ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (40s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (82ms)
    √ non dbo schema use tvp simple test type select test (57ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (244ms)
    √ employee use tm to get a table value type representing table and create that user table type (87ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (714ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (202ms)
    √ bulk insert/update/select int column of signed batchSize 10 (197ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (245ms)
    √ employee insert/select with non primary key (123ms)
    √ employee insert - update a single column (80ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (46ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (38ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2013ms)
    √ call proc that returns length of input string and decribes itself in results (40ms)
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (340ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (38s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (266ms)
    √ employee use tm to get a table value type representing table and create that user table type (87ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3000ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (708ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (215ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (202ms)
    √ bulk insert/update/select int column of signed batchSize 10 (196ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (251ms)
    √ employee insert/select with non primary key (98ms)
    √ employee insert - update a single column (97ms)
    √ bulk insert/update/select bit strict column 10 (178ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (186ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (178ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (188ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (327ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (256ms)
    √ employee use tm to get a table value type representing table and create that user table type (102ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (701ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text (69ms)
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (221ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (191ms)
    √ bulk insert/update/select int column of signed batchSize 10 (190ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (248ms)
    √ employee insert/select with non primary key (99ms)
    √ employee insert - update a single column (85ms)
    √ bulk insert/update/select bit strict column 10 (39ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2011ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (339ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (35s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (48ms)
    √ non dbo schema use tvp simple test type select test (60ms)
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (282ms)
    √ employee use tm to get a table value type representing table and create that user table type (264ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (720ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (233ms)
    √ bulk insert/update/select int column of signed batchSize 10 (203ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (253ms)
    √ employee insert/select with non primary key (91ms)
    √ employee insert - update a single column (272ms)
    √ bulk insert/update/select bit strict column 10 (198ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (49ms)
    √ bulk insert simple multi-column object in batches 10 (186ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (333ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (28s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (48ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (77ms)
    √ employee use tm to get a table value type representing table and create that user table type (87ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (701ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (237ms)
    √ bulk insert/update/select int column of signed batchSize 10 (203ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (239ms)
    √ employee insert/select with non primary key (89ms)
    √ employee insert - update a single column (87ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (41ms)
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2014ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (330ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (36s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (89ms)
    √ employee use tm to get a table value type representing table and create that user table type (83ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (735ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC (64ms)
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (191ms)
    √ bulk insert/update/select int column of signed batchSize 10 (182ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (263ms)
    √ employee insert/select with non primary key (102ms)
    √ employee insert - update a single column (96ms)
    √ bulk insert/update/select bit strict column 10 (184ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (180ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2019ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (339ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (28s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (252ms)
    √ employee use tm to get a table value type representing table and create that user table type (87ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (724ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number (264ms)
    √ test 018 - verify functionality of data type 'bit', fetch as number (143ms)
    √ test 019 - verify functionality of data type 'float(53)', fetch as number (561ms)
    √ test 020 - verify functionality of data type 'real', fetch as number (206ms)
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (54ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (194ms)
    √ bulk insert/update/select int column of signed batchSize 10 (191ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (239ms)
    √ employee insert/select with non primary key (274ms)
    √ employee insert - update a single column (83ms)
    √ bulk insert/update/select bit strict column 10 (187ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (192ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (205ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (185ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2018ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (342ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (42s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (80ms)
    √ employee use tm to get a table value type representing table and create that user table type (85ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (721ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (200ms)
    √ bulk insert/update/select int column of signed batchSize 10 (196ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (240ms)
    √ employee insert/select with non primary key (94ms)
    √ employee insert - update a single column (261ms)
    √ bulk insert/update/select bit strict column 10 (186ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (186ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2020ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (329ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (49ms)
    √ test timezone components of datetimeoffset


  219 passing (38s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (89ms)
    √ employee use tm to get a table value type representing table and create that user table type (83ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (722ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (209ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (204ms)
    √ bulk insert/update/select int column of signed batchSize 10 (205ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (231ms)
    √ employee insert/select with non primary key (94ms)
    √ employee insert - update a single column (278ms)
    √ bulk insert/update/select bit strict column 10 (184ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1 (113ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (179ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (38ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (38ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (186ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (336ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (266ms)
    √ employee use tm to get a table value type representing table and create that user table type (102ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (702ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (208ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (216ms)
    √ bulk insert/update/select int column of signed batchSize 10 (185ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (253ms)
    √ employee insert/select with non primary key (87ms)
    √ employee insert - update a single column (80ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10 (176ms)
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (182ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (333ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (34s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (48ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (86ms)
    √ employee use tm to get a table value type representing table and create that user table type (83ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (708ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (227ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (200ms)
    √ bulk insert/update/select int column of signed batchSize 10 (211ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (333ms)
    √ employee insert/select with non primary key (91ms)
    √ employee insert - update a single column (88ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (187ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (185ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (343ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (83ms)
    √ employee use tm to get a table value type representing table and create that user table type (81ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (707ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (52ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (210ms)
    √ bulk insert/update/select int column of signed batchSize 10 (212ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (248ms)
    √ employee insert/select with non primary key (104ms)
    √ employee insert - update a single column (85ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (40ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (193ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (179ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2013ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (329ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (34s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (71ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (278ms)
    √ employee use tm to get a table value type representing table and create that user table type (81ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (703ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter (49ms)
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter (50ms)
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (51ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (193ms)
    √ bulk insert/update/select int column of signed batchSize 10 (189ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10 (172ms)
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (325ms)
    √ employee insert/select with non primary key (94ms)
    √ employee insert - update a single column (96ms)
    √ bulk insert/update/select bit strict column 10 (42ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (43ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (190ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (181ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (333ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (99ms)
    √ employee use tm to get a table value type representing table and create that user table type (86ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (707ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number (96ms)
    √ test 012 - verify functionality of data type 'int', fetch as number (159ms)
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (56ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (225ms)
    √ bulk insert/update/select int column of signed batchSize 10 (185ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (239ms)
    √ employee insert/select with non primary key (94ms)
    √ employee insert - update a single column (88ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (54ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (43ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (349ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (39s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (263ms)
    √ employee use tm to get a table value type representing table and create that user table type (79ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (704ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2000ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (50ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (192ms)
    √ bulk insert/update/select int column of signed batchSize 10 (186ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (243ms)
    √ employee insert/select with non primary key (95ms)
    √ employee insert - update a single column (272ms)
    √ bulk insert/update/select bit strict column 10 (196ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (89ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (57ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (182ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2021ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (333ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (40s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (49ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (257ms)
    √ employee use tm to get a table value type representing table and create that user table type (80ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (720ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter (39ms)
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error (93ms)
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (57ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (210ms)
    √ bulk insert/update/select int column of signed batchSize 10 (188ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (235ms)
    √ employee insert/select with non primary key (89ms)
    √ employee insert - update a single column (99ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (42ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (44ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (339ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (247ms)
    √ employee use tm to get a table value type representing table and create that user table type (82ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (727ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field (45ms)
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (214ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (198ms)
    √ bulk insert/update/select int column of signed batchSize 10 (188ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (243ms)
    √ employee insert/select with non primary key (90ms)
    √ employee insert - update a single column (88ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1 (43ms)
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (191ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (183ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (339ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (35s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (299ms)
    √ employee use tm to get a table value type representing table and create that user table type (81ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (714ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (50ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (209ms)
    √ bulk insert/update/select int column of signed batchSize 10 (189ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (257ms)
    √ employee insert/select with non primary key (99ms)
    √ employee insert - update a single column (86ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (188ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (189ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (334ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (258ms)
    √ employee use tm to get a table value type representing table and create that user table type (257ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3000ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (726ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (90ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (62ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (204ms)
    √ bulk insert/update/select int column of signed batchSize 10 (194ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (249ms)
    √ employee insert/select with non primary key (90ms)
    √ employee insert - update a single column (84ms)
    √ bulk insert/update/select bit strict column 10 (38ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (57ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (42ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (54ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (337ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification (136ms)
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (40ms)
    √ test timezone components of datetimeoffset


  219 passing (37s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (81ms)
    √ employee use tm to get a table value type representing table and create that user table type (87ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (696ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2000ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (216ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (281ms)
    √ bulk insert/update/select int column of signed batchSize 10 (200ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (232ms)
    √ employee insert/select with non primary key (109ms)
    √ employee insert - update a single column (270ms)
    √ bulk insert/update/select bit strict column 10 (192ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10 (42ms)
    √ bulk insert simple multi-column object in batches 10 (185ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (329ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (28s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (49ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (251ms)
    √ employee use tm to get a table value type representing table and create that user table type (81ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3003ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param. (49ms)

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (712ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (55ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (195ms)
    √ bulk insert/update/select int column of signed batchSize 10 (194ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (241ms)
    √ employee insert/select with non primary key (88ms)
    √ employee insert - update a single column (84ms)
    √ bulk insert/update/select bit strict column 10 (194ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (71ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (44ms)
    √ bulk insert simple multi-column object in batches 10 (190ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (338ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (98ms)
    √ test timezone components of datetimeoffset


  219 passing (39s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (267ms)
    √ employee use tm to get a table value type representing table and create that user table type (89ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (726ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter (51ms)
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (54ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (200ms)
    √ bulk insert/update/select int column of signed batchSize 10 (198ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (244ms)
    √ employee insert/select with non primary key (263ms)
    √ employee insert - update a single column (82ms)
    √ bulk insert/update/select bit strict column 10 (189ms)
    √ bulk insert/select bit strict column batchSize 1 (43ms)
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (190ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (188ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2019ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (341ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (40ms)
    √ test timezone components of datetimeoffset


  219 passing (39s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (79ms)
    √ employee use tm to get a table value type representing table and create that user table type (89ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (102ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (706ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (49ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (209ms)
    √ bulk insert/update/select int column of signed batchSize 10 (207ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (241ms)
    √ employee insert/select with non primary key (99ms)
    √ employee insert - update a single column (261ms)
    √ bulk insert/update/select bit strict column 10 (195ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (41ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (38ms)
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (186ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (331ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (58ms)
    √ non dbo schema use tvp simple test type select test (56ms)
    √ use tvp simple test type select test (82ms)
    √ use tvp simple test type insert test (47ms)
    √ use tvp to select from table type complex object Employee type (92ms)
    √ employee use tm to get a table value type representing table and create that user table type (91ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (720ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date (95ms)
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text (38ms)
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4003ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (217ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (209ms)
    √ bulk insert/update/select int column of signed batchSize 10 (203ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (242ms)
    √ employee insert/select with non primary key (97ms)
    √ employee insert - update a single column (84ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1 (177ms)
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (41ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (175ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (185ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (328ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (35s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (47ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (260ms)
    √ employee use tm to get a table value type representing table and create that user table type (89ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (728ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter (131ms)
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2002ms)
    √ test timeout 10 secs on waitfor delay 2 (2002ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (57ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (217ms)
    √ bulk insert/update/select int column of signed batchSize 10 (207ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (248ms)
    √ employee insert/select with non primary key (90ms)
    √ employee insert - update a single column (88ms)
    √ bulk insert/update/select bit strict column 10 (38ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10 (187ms)
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (185ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (339ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (44ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (272ms)
    √ employee use tm to get a table value type representing table and create that user table type (77ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (714ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types (69ms)

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (54ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (200ms)
    √ bulk insert/update/select int column of signed batchSize 10 (186ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (278ms)
    √ employee insert/select with non primary key (75ms)
    √ employee insert - update a single column (251ms)
    √ bulk insert/update/select bit strict column 10 (189ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (55ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1 (183ms)
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (182ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2016ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (340ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (38s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (45ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (92ms)
    √ employee use tm to get a table value type representing table and create that user table type (89ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (104ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (723ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors (38ms)
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (212ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (199ms)
    √ bulk insert/update/select int column of signed batchSize 10 (196ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (249ms)
    √ employee insert/select with non primary key (85ms)
    √ employee insert - update a single column (97ms)
    √ bulk insert/update/select bit strict column 10 (178ms)
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (38ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10 (38ms)
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (195ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (178ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2012ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (335ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (29s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (241ms)
    √ employee use tm to get a table value type representing table and create that user table type (83ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....; (129ms)

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3001ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (103ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (701ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error (60ms)
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4001ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (50ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (205ms)
    √ bulk insert/update/select int column of signed batchSize 10 (191ms)
    √ bulk insert/select varbinary column batchSize 1 (184ms)
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (232ms)
    √ employee insert/select with non primary key (90ms)
    √ employee insert - update a single column (88ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1 (93ms)
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10
    √ bulk insert/update/select/delete varchar column batchSize 10
    √ bulk insert simple multi-column object in batches 10 (178ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2017ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (330ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components
    √ test timezone components of datetimeoffset


  219 passing (40s)

0
"next " 
{ _: [],
  t: 
   [ 'tvp',
     'warnings.js',
     'compoundqueries.js',
     'querycancel.js',
     'txn.js',
     'datatypes.js',
     'params.js',
     'query.js',
     'querytimeout.js',
     'connect.js',
     'bulk.js',
     'sproc.js',
     'prepared.js',
     'userbind.js',
     'dates.js' ] }


  tvp
    √ use tvp simple test type insert test using pm (46ms)
    √ non dbo schema use tvp simple test type select test
    √ use tvp simple test type select test
    √ use tvp simple test type insert test
    √ use tvp to select from table type complex object Employee type (95ms)
    √ employee use tm to get a table value type representing table and create that user table type (91ms)

  warnings
    √ TEST ONE - Query - JOIN HINT WARNING
    √ TEST TWO - Query - NULL ELIMNATED WARNING
    √ TEST THREE - Prepared Query - JOIN HINT WARNING
    √ TEST FOUR - Prepared Query - NULL ELIMNATED WARNING
    √ TEST FIVE - Stord Proc - JOIN HINT WARNING
    √ print raises warning not error

  compoundqueries
    √ check row count emission is as expected for compound queries 1 insert
    √ check row count emission is as expected for compound queries 3 inserts, update all
    √ check row count emission is as expected for compound queries 4 inserts, 2 updates, 2 updates, update all
    √ test 001 - batched query: SELECT....; INSERT ....; SELECT....;
    √ test 003 - batched query: SELECT....; SELECT (with no results) ....; SELECT....;
    √ test 004 - batched query: SELECT....; INSERT (invalid...should fail) ....; SELECT....;

  querycancel
    √ cancel single query from notifier using tmp connection - expect Operation canceled
    √ cancel single waitfor - expect Operation canceled
    √ cancel single waitfor on non polling query - expect cancel error and query to complete (3002ms)
    √ cancel single waitfor using notifier - expect Operation canceled
    √ nested cancel - expect Operation canceled on both
    √ cancel single query - expect Operation canceled
    √ 2 x cancel - expect Operation canceled on both
    √ waitfor delay 20 and delayed cancel- expect Operation canceled (101ms)
    √ cancel single query and cancel again - expect Operation canceled and error
    √ cancel single query and submit new query to prove connection still valid
    √ cancel a prepared call that waits
    √ cancel a call to proc that waits for delay of input param.

  txn
    √ setup for tests
    √ begin a transaction and rollback with no query
    √ begin a transaction and rollback with no query and no callback
    √ begin a transaction and commit
    √ begin a transaction and rollback
    √ begin a transaction and then query with an error
    √ begin a transaction and commit (with no async support)

  datatypes
    √ test 023a - fetch large varbinary in chunks 'varbinary(max)', fetch as binary (717ms)
    √ test 001 - verify functionality of data type 'smalldatetime', fetch as date
    √ test 002 - verify functionality of data type 'datetime', fetch as date
    √ test 003_a - insert valid data into time(7) via TSQL, fetch as date
    √ test 003_b - insert valid data into time(0) via TSQL, fetch as date
    √ test 004_a - insert valid data into datetime2(7) via TSQL, fetch as date
    √ test 004_b - insert valid data into datetime2(0) via TSQL, fetch as date
    √ test 005_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date
    √ test 005_b - insert valid data into datetimeoffset(0) via TSQL, fetch as date
    √ test 006_a - insert valid data into datetimeoffset(7) via TSQL, fetch as date UTC
    √ test 007 - insert valid data into date via TSQL, fetch as date
    √ test 008 - insert null into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_VC - insert 2048 char string into varchar(max) via TSQL, fetch as text
    √ test 008_bndryCheck_NVC - insert 2049 char string into nvarchar(max) via TSQL, fetch as text
    √ test 009 - verify functionality of data type 'guid', fetch as text
    √ test 010 - verify functionality of data type 'tinyint', fetch as number
    √ test 011 - verify functionality of data type 'smallint', fetch as number
    √ test 012 - verify functionality of data type 'int', fetch as number
    √ test 013 - verify functionality of data type 'bigint', fetch as number
    √ test 014 - verify functionality of data type 'smallmoney', fetch as number
    √ test 015 - verify functionality of data type 'money', fetch as number
    √ test 016 - verify functionality of data type 'numeric(7,3)', fetch as number
    √ test 017 - verify functionality of data type 'decimal(7,3)', fetch as number
    √ test 018 - verify functionality of data type 'bit', fetch as number
    √ test 019 - verify functionality of data type 'float(53)', fetch as number
    √ test 020 - verify functionality of data type 'real', fetch as number
    √ test 021 - verify functionality of data type 'binary(n)', fetch as binary
    √ test 022 - verify functionality of data type 'varbinary(n)', fetch as binary
    √ test 023 - verify functionality of data type 'varbinary(max)', fetch as binary
    √ test 024 - verify functionality of data type 'image', fetch as binary
    √ test 025 - verify functionality of data type 'xml', fetch as text (43ms)
    √ test 026 - verify functionality of data type 'char', fetch as text
    √ test 027 - verify functionality of data type 'varchar(n)', fetch as text
    √ test 028 - verify functionality of data type 'varchar(max)', fetch as text
    √ test 029 - verify functionality of data type 'text', fetch as text
    √ test 030 - verify functionality of data type 'nchar', fetch as text
    √ test 031 - verify functionality of data type 'nvarchar(n)', fetch as text
    √ test 032 - verify functionality of data type 'nvarchar(max)', fetch as text
    √ test 033 - verify functionality of data type 'ntext', fetch as text
    √ test 034 - verify functionality of data type 'sysname', fetch as text

  params
    √ select a long string using callback
    √ select a long buffer using callback
    √ select a long string using streaming - ensure no fragmentation
    √ verify buffer longer than column causes error
    √ insert large string into max column using user binding WLongVarChar
    √ verify empty string is sent as empty string, not null
    √ verify null string is sent as null, not empty string
    √ verify single char string param
    √ verify bool (true) to sql_variant
    √ verify bool (false) to sql_variant
    √ verify varchar to sql_variant
    √ verify numeric decimal to sql_variant
    √ verify int to sql_variant
    √ verify getdate (datetime) to sql_variant
    √ verify getdate to sql_variant
    √ insert null as parameter
    √ invalid numbers cause errors
    √ insert string as parameter
    √ insert a bool as a parameter
    √ insert largest positive int as parameter
    √ insert largest negative int as parameter
    √ insert bigint as parameter
    √ insert largest bigint as parameter
    √ insert decimal as parameter
    √ insert decimal as bigint parameter
    √ insert date as parameter
    √ verify js date inserted into datetime field
    √ verify empty string inserted into nvarchar field
    √ insert min and max number values
    √ insert large string into max column
    √ verify js date inserted into datetime field
    √ verify js date before 1970 inserted into datetime field
    √ verify dates with midnight time
    √ verify bug fix for last day of the year error
    √ verify Buffer objects as input parameters
    √ verify that non-Buffer object parameter returns an error
    √ bind a null to binary using sqlTypes.asVarBinary(null)
    √ bind a Buffer([0,1,2,3])] to binary

  query
    √ test function parameter validation
    √ query with errors
    √ simple query
    √ simple rawFormat query
    √ simple query of types like var%
    √ streaming test
    √ serialized queries
    √ query with errors
    √ multiple results from query in callback
    √ multiple results from query in events
    √ boolean return value from query
    √ verify empty results retrieved properly
    √ test retrieving a string with null embedded
    √ test retrieving a non-LOB string of max size
    √ test retrieving an empty string
    √ test retrieving a LOB string larger than max string size
    √ test function parameter validation
    √ verify metadata is retrieved for udt/geography types

  querytimeout
    √ test timeout 2 secs on waitfor delay 10 (2001ms)
    √ test timeout 10 secs on waitfor delay 2 (2001ms)
    √ test timeout 0 secs on waitfor delay 4 (4002ms)

  open
    √ connection closes OK in sequence with query
    √ trusted connection to a server
    √ verify closed connection throws an exception
    √ verify connection is not closed prematurely until a query is complete
    √ verify that close immediately flag only accepts booleans

  bulk
    √ employee tmp table complex json object array bulk operations (57ms)
    √ bulk insert simple multi-column object - default a nullable column 10 (189ms)
    √ bulk insert/update/select int column of signed batchSize 10 (184ms)
    √ bulk insert/select varbinary column batchSize 1
    √ bulk insert/select varbinary column batchSize 10
    √ bulk insert/select null column of datetime batchSize 10
    √ bulk insert/select null column of datetime batchSize 1
    √ employee complex json object array bulk operations (314ms)
    √ employee insert/select with non primary key (819ms)
    √ employee insert - update a single column (304ms)
    √ bulk insert/update/select bit strict column 10
    √ bulk insert/select bit strict column batchSize 1
    √ bulk insert/select bit strict column 10
    √ bulk insert/select datetime column batchSize 1
    √ bulk insert/select datetime column batchSize 10
    √ bulk insert/select int column of signed batchSize 1
    √ bulk insert/select int column of signed batchSize 10
    √ bulk insert/select int column of unsigned batchSize 1
    √ bulk insert/select int column of unsigned batchSize 10
    √ bulk insert/select/update int column of unsigned batchSize 10 (42ms)
    √ bulk insert/select bit column batchSize 1
    √ bulk insert/select bit column 10
    √ bulk insert/update/select bit column 10
    √ bulk insert/select decimal column batchSize 1
    √ bulk insert/select decimal column batchSize 10
    √ bulk insert/select/delete decimal column batchSize 10
    √ bulk insert/update/select decimal column batchSize 10 (39ms)
    √ bulk insert/select varchar column batchSize 1
    √ bulk insert/select varchar column batchSize 10 (189ms)
    √ bulk insert/select/delete varchar column batchSize 10
    √ bulk insert/update/select varchar column batchSize 10 (56ms)
    √ bulk insert/update/select/delete varchar column batchSize 10 (263ms)
    √ bulk insert simple multi-column object in batches 10 (377ms)

  sproc
    √ get proc and call  - should not error
    √ get proc and call multiple times with changing params i.e. prove each call is independent
    √ call proc that waits for delay of input param - wait 2, timeout 5 - should not error (2015ms)
    √ call proc that returns length of input string and decribes itself in results
    √ call proc that returns length of input string
    √ stream call proc no callback
    √ call proc that has 2 output string params + return code
    √ call proc that has 2 input params + 1 output
    √ test asselect on proc

  prepared
    √ use prepared statement twice with no parameters.
    √ use prepared statements to select a row, then delete it over each row.
    √ stress test prepared statement with 500 invocations cycling through primary key (335ms)
    √ use prepared statement twice with different params.

  userbind
    √ user bind DateTime2 to sql type datetime2(7) - with scale set too low, should error
    √ user bind WLongVarChar to NVARCHAR(MAX)
    √ user bind DateTimeOffset to sql type DateTimeOffset - provide offset of 60 minutes
    √ user bind DateTimeOffset to sql type DateTimeOffset - no offset 
    √ user bind SmallDateTime to sql type smalldatetime
    √ user bind DateTime2 to sql type datetime2(7) default scale
    √ user bind DateTime2 to sql type datetime2(7) - with scale set correctly, should pass
    √ user bind DateTime2 to sql type datetime2(7) - with scale set to illegal value, should error
    √ user bind DateTime to sql type datetime2(7)
    √ user bind DateTime to sql type datetime - driver currently only supports 10ms accuracy with datetime
    √ user bind UniqueIdentifier
    √ user bind Time
    √ user bind Date
    √ user bind Xml - well formatted.
    √ user bind Xml - bad xml should give error
    √ user bind nchar - check truncated user strings (1)
    √ user bind Char - check truncated user strings (1)
    √ user bind Char - returned string will be padded (2)
    √ user bind Char - use precision to clip user string (3)
    √ user bind NVarChar /16 bit encoded
    √ user bind Float, maps to numeric data structure.
    √ user bind Double, maps to numeric data structure.
    √ user bind Bit
    √ user bind BigInt
    √ user bind Int
    √ user bind TinyInt
    √ user bind SmallInt

  date tests
    √ date retrieval verification
    √ test timezone offset correctly offsets js date type
    √ date to millisecond verification
    √ time to millisecond components (131ms)
    √ test timezone components of datetimeoffset


  219 passing (42s)

0
"next " 
